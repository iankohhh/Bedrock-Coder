# This is an AWS CloudFormation template for creating an Application Load Balancer (ALB),
# a Target Group, and a Lambda function with the provided Python code.

# Define the resources
Resources:

  # Permission for ALB to invoke Lambda
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: elasticloadbalancing.amazonaws.com

  # Lambda Role
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess


  # Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: MyLambdaFunction
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Timeout: 900
      Code:
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):
              client = boto3.client('bedrock-runtime')
              print(event)

              x = json.loads(event['body'])
              user_message = json.loads(event['body'])["prompt_data"]
              images_data = json.loads(event['body'])["prompt_image"]

              # Constructing the Image Data body

              content_to_append = [{
                                  "type": "text",
                                  "text": user_message
                              }]

              if len(images_data[0])!=0:
                  for i in images_data:
                      content_data = { "type": "image", "source": { "type": "base64", "media_type": "image/png", "data": i[0] } }
                      content_to_append.append(content_data)

              request_body = {
                  "messages": [
                      {
                          "role": "user",
                          "content": content_to_append
                      }
                  ],
                  "anthropic_version": "bedrock-2023-05-31",
                  "max_tokens": 200000,
                  "temperature": 0,
                  "top_k": 250,
                  "top_p": 0.999,
                  "stop_sequences": ["\n\nHuman:"]
              }
              print(request_body)

              request_body_bytes = bytes(json.dumps(request_body), 'utf-8')

              response = client.invoke_model(
                  body=request_body_bytes,
                  contentType='application/json',
                  accept='application/json',
                  modelId='anthropic.claude-3-sonnet-20240229-v1:0'
              )

              # The response object will contain the model's output
              response_body = json.loads(response['body'].read().decode('utf-8'))
              text_content = response_body['content'][0]['text']

              return {
                  'statusCode': 200,
                  'body': json.dumps(text_content)
              }







  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: false
      Name: MyTargetGroup
      TargetType: lambda
      Targets:
        - Id: !GetAtt LambdaFunction.Arn

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ALB Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

# Define the parameters
Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: The VPC ID where the resources will be created.
  PublicSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: The first public subnet ID where the ALB will be created.
  PublicSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: The second public subnet ID where the ALB will be created.

# Outputs
Outputs:
  LambdaFunctionArn:
    Description: The ARN of the Lambda function
    Value: !GetAtt LambdaFunction.Arn
  ApplicationLoadBalancerDNSName:
    Description: The DNS name of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
